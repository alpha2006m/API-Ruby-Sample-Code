=begin
<PBXDom API>

OpenAPI spec version: 2.1.0

Generated by: https://github.com/swagger-api/swagger-codegen.git

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

=end

require "uri"

module SwaggerClient
  class DefaultApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # 
    # Gets `Calls` info. 
    # @param rpt_type Report type. (0 report, 1 widget, 2 chart).
    # @param rpt_id Report id.
    # @param [Hash] opts the optional parameters
    # @option opts [Float] :start Start offset.
    # @option opts [Float] :limit Number of results to return. Max 10K.
    # @option opts [String] :sort_by Sort column.
    # @option opts [String] :sort_type Sort mode asc/desc.
    # @option opts [String] :from_date Start date time.
    # @option opts [String] :to_date End date time.
    # @option opts [Float] :duration Duration range.
    # @option opts [String] :phone List of caller phone.
    # @option opts [String] :phone1 List of dialled phones.
    # @option opts [String] :co List of trunk/co.
    # @option opts [String] :ext list of extensions.
    # @option opts [Float] :pbx_id list of PBX Ids.
    # @option opts [Float] :call_source list of callsource.
    # @option opts [Float] :call_type list of call type signatures.(5 Unanswered Calls, 7 Transfered Calls, 8 Forwarded Calls)
    # @option opts [Float] :direction list of direction.(0 incoming, 1 outgoing, 2 internal)
    # @option opts [String] :caller_name list of caller name.
    # @option opts [String] :did list of did.
    # @option opts [String] :dnis list of dnis.
    # @option opts [String] :acc list of account code.
    # @option opts [Float] :ring Ring range.Seconds unit.
    # @option opts [Float] :cost Cost range.
    # @option opts [Float] :group Department/Group id.
    # @return [Array<InlineResponse200>]
    def calls_get(rpt_type, rpt_id, opts = {})
      data, _status_code, _headers = calls_get_with_http_info(rpt_type, rpt_id, opts)
      return data
    end

    # 
    # Gets &#x60;Calls&#x60; info. 
    # @param rpt_type Report type. (0 report, 1 widget, 2 chart).
    # @param rpt_id Report id.
    # @param [Hash] opts the optional parameters
    # @option opts [Float] :start Start offset.
    # @option opts [Float] :limit Number of results to return. Max 10K.
    # @option opts [String] :sort_by Sort column.
    # @option opts [String] :sort_type Sort mode asc/desc.
    # @option opts [String] :from_date Start date time.
    # @option opts [String] :to_date End date time.
    # @option opts [Float] :duration Duration range.
    # @option opts [String] :phone List of caller phone.
    # @option opts [String] :phone1 List of dialled phones.
    # @option opts [String] :co List of trunk/co.
    # @option opts [String] :ext list of extensions.
    # @option opts [Float] :pbx_id list of PBX Ids.
    # @option opts [Float] :call_source list of callsource.
    # @option opts [Float] :call_type list of call type signatures.(5 Unanswered Calls, 7 Transfered Calls, 8 Forwarded Calls)
    # @option opts [Float] :direction list of direction.(0 incoming, 1 outgoing, 2 internal)
    # @option opts [String] :caller_name list of caller name.
    # @option opts [String] :did list of did.
    # @option opts [String] :dnis list of dnis.
    # @option opts [String] :acc list of account code.
    # @option opts [Float] :ring Ring range.Seconds unit.
    # @option opts [Float] :cost Cost range.
    # @option opts [Float] :group Department/Group id.
    # @return [Array<(Array<InlineResponse200>, Fixnum, Hash)>] Array<InlineResponse200> data, response status code and response headers
    def calls_get_with_http_info(rpt_type, rpt_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi.calls_get ..."
      end
      # verify the required parameter 'rpt_type' is set
      fail ArgumentError, "Missing the required parameter 'rpt_type' when calling DefaultApi.calls_get" if rpt_type.nil?
      # verify the required parameter 'rpt_id' is set
      fail ArgumentError, "Missing the required parameter 'rpt_id' when calling DefaultApi.calls_get" if rpt_id.nil?
      # resource path
      local_var_path = "/Calls".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'rptType'] = rpt_type
      query_params[:'rptId'] = rpt_id
      query_params[:'start'] = opts[:'start'] if opts[:'start']
      query_params[:'limit'] = opts[:'limit'] if opts[:'limit']
      query_params[:'sortBy'] = opts[:'sort_by'] if opts[:'sort_by']
      query_params[:'sortType'] = opts[:'sort_type'] if opts[:'sort_type']
      query_params[:'fromDate'] = opts[:'from_date'] if opts[:'from_date']
      query_params[:'toDate'] = opts[:'to_date'] if opts[:'to_date']
      query_params[:'duration'] = opts[:'duration'] if opts[:'duration']
      query_params[:'phone'] = opts[:'phone'] if opts[:'phone']
      query_params[:'phone1'] = opts[:'phone1'] if opts[:'phone1']
      query_params[:'co'] = opts[:'co'] if opts[:'co']
      query_params[:'ext'] = opts[:'ext'] if opts[:'ext']
      query_params[:'pbxId'] = opts[:'pbx_id'] if opts[:'pbx_id']
      query_params[:'callSource'] = opts[:'call_source'] if opts[:'call_source']
      query_params[:'callType'] = opts[:'call_type'] if opts[:'call_type']
      query_params[:'direction'] = opts[:'direction'] if opts[:'direction']
      query_params[:'callerName'] = opts[:'caller_name'] if opts[:'caller_name']
      query_params[:'did'] = opts[:'did'] if opts[:'did']
      query_params[:'dnis'] = opts[:'dnis'] if opts[:'dnis']
      query_params[:'acc'] = opts[:'acc'] if opts[:'acc']
      query_params[:'ring'] = opts[:'ring'] if opts[:'ring']
      query_params[:'cost'] = opts[:'cost'] if opts[:'cost']
      query_params[:'group'] = opts[:'group'] if opts[:'group']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = []
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
            auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<InlineResponse200>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#calls_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Gets `Charts` list. 
    # @param [Hash] opts the optional parameters
    # @return [Array<InlineResponse200>]
    def features_charts_get(opts = {})
      data, _status_code, _headers = features_charts_get_with_http_info(opts)
      return data
    end

    # 
    # Gets &#x60;Charts&#x60; list. 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<InlineResponse200>, Fixnum, Hash)>] Array<InlineResponse200> data, response status code and response headers
    def features_charts_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi.features_charts_get ..."
      end
      # resource path
      local_var_path = "/Features/charts".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = []
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
            auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<InlineResponse200>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#features_charts_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Gets `Reports` list. 
    # @param [Hash] opts the optional parameters
    # @return [Array<InlineResponse200>]
    def features_reports_get(opts = {})
      data, _status_code, _headers = features_reports_get_with_http_info(opts)
      return data
    end

    # 
    # Gets &#x60;Reports&#x60; list. 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<InlineResponse200>, Fixnum, Hash)>] Array<InlineResponse200> data, response status code and response headers
    def features_reports_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi.features_reports_get ..."
      end
      # resource path
      local_var_path = "/Features/reports".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = []
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
            auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<InlineResponse200>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#features_reports_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Gets `Widgets` list. 
    # @param [Hash] opts the optional parameters
    # @return [Array<InlineResponse200>]
    def features_widget_get(opts = {})
      data, _status_code, _headers = features_widget_get_with_http_info(opts)
      return data
    end

    # 
    # Gets &#x60;Widgets&#x60; list. 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<InlineResponse200>, Fixnum, Hash)>] Array<InlineResponse200> data, response status code and response headers
    def features_widget_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi.features_widget_get ..."
      end
      # resource path
      local_var_path = "/Features/widget".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = []
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
            auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<InlineResponse200>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#features_widget_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
